<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.0">
    <TriggerPackage>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>3k Mapper</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>99</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName>3k Mapper</packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList/>
            <regexCodePropertyList/>
            <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>3k Mapper</name>
                <script></script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList/>
                <regexCodePropertyList/>
                <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>3k Room Description</name>
                    <script></script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList/>
                    <regexCodePropertyList/>
                    <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>roomexits</name>
                        <script>exits=&quot;&quot;
roomdesc=string.trim(roomdesc)
if (matches[6]) then
	if (string.find(matches[6],&quot;§&quot;)) then	
		local match = matches[6]
		exits=string.trim(string.sub(match,1,string.find(match,&quot;§&quot;)-2))
		disableTrigger(&quot;multipleRoomExits&quot;)
		processExits(exits)
	else
		exits=matches[6]
		enableTrigger(&quot;multipleRoomExits&quot;)
	end
else
	processExits(nil)
end
disableTrigger(&quot;roomdescription&quot;)
disableTrigger(&quot;roomexits&quot;)</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>1</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>(((\s+There (are|is) \w+ obvious exit.?:) (.+))|No obvious exits.¡?)</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="yes" isColorTriggerBg="yes">
                        <name>roomdescription</name>
                        <script>if matches[1] then
	roomdesc = roomdesc..matches[1]..&quot;\n&quot;
end
setTriggerStayOpen(&quot;roomdescription&quot;, 1)</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>1</conditonLineDelta>
                        <mStayOpen>1</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#808000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>FG8BG2</string>
                            <string>^(.+)$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>6</integer>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="yes" isColorTriggerBg="yes">
                        <name>roomname</name>
                        <script>local match = matches[2]
compassSpace = string.len(matches[2])
roomname = string.trim(matches[2])
roomdesc = &quot;&quot;
if mapfollow and findme == nil and pWimpy == nil then
	onFollow(nil)
elseif mapon() or findme or pWimpy then
	enableTrigger(&quot;spacer&quot;)
	enableTrigger(&quot;roomexits&quot;)
end</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>11</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#00fff7</mFgColor>
                        <mBgColor>#000000</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#00ff00</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>(.+)(\s+)?¡</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>spacer</name>
                        <script>enableTrigger(&quot;roomdescription&quot;)
disableTrigger(&quot;spacer&quot;)</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>3</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>multipleRoomExits</name>
                        <script>local match = matches[2]
if (match and string.find(match,&quot;§&quot;)) then
	exits=exits..string.trim(string.sub(match,1,string.find(match,&quot;§&quot;)-2))
	disableTrigger(&quot;multipleRoomExits&quot;)
	processExits(exits)
else
	exits=exits..match
end</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>[\s]{10,}(.*)</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                </TriggerGroup>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>WimpyNoDir</name>
                    <script>pWimpy=1
tBotDisable()
send(&quot;brief map&quot;)
send(&quot;look&quot;)</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>Your legs run away with you!</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>0</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Can't go trigger</name>
                    <script>table.remove(comTable,1)</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>You cannot go</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>0</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Too dark</name>
                    <script>if mapfollow and findme == nil then
	onFollow(nil)
end</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>99</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>It is too dark</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Follower</name>
                    <script>local player = matches[2]
if player == leader then
	onFollow(matches[3])
end</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>99</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>(.+) leaves (.+).</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Wimpy</name>
                    <script>onFollow(matches[2])</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>99</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>Your legs run away with you (.+).</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
            </TriggerGroup>
        </TriggerGroup>
    </TriggerPackage>
    <TimerPackage/>
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>3k Mapper</name>
            <script></script>
            <command></command>
            <packageName>3k Mapper</packageName>
            <regex></regex>
            <AliasGroup isActive="yes" isFolder="yes">
                <name>3k Mapper</name>
                <script></script>
                <command></command>
                <packageName></packageName>
                <regex></regex>
                <Alias isActive="yes" isFolder="no">
                    <name>purgecom</name>
                    <script>comTable = {}</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^purgecom$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>firstroom</name>
                    <script>firstRoom = true
send(&quot;brief map&quot;)
display(&quot;now enter a cardinal direction to start the mapping process.  Make sure you type 'mtoggle' first to enable mapping&quot;)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^firstroom$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Set Location</name>
                    <script>roomsToWalk = nil
speedWalking = 0
onPlayerMove(matches[2])</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^setroom (\d+)$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Room walker</name>
                    <script>local entry = matches[2]
if tonumber(entry) then
	entry = tonumber(entry)
	gotoRoom(entry)
	onPlayerMove(entry)
elseif mwalkList[entry] then
	gotoRoom(mwalkList[entry])
else
	--it's a word, look for it in areas and walk to area
	local tstring = string.lower(entry)
	local atable = getAreaTable()
	local exactmatch = {}
	local pareas = {}
	local eiter = 1
	local piter=1
	for i,v in pairs(atable) do
		local area = string.lower(i)
		if string.match(area, &quot;^&quot;..tstring..&quot;$&quot;) then
			exactmatch[eiter] = {v,i}
			eiter = eiter+1
		end
		if string.find(area, tstring) then
			pareas[piter] = {v,i}
			piter = piter+1
		end
	end
	if #exactmatch == 1 then
		local rooms = getAreaRooms(exactmatch[1][1])
		gotoRoom(rooms[0])
	elseif #pareas == 1 then
		local rooms = getAreaRooms(pareas[1][1])
		gotoRoom(rooms[0])
	else
		display(pareas)
	end
end</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^mwalk (.+)$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Map toggle</name>
                    <script>if mapstatus then
	mapstatus = nil
	echo(&quot;\n MAPPER DISABLED&quot;)
else
	mapstatus = 1
	mapfollow = nil
	echo(&quot;\n MAPPER ENABLED&quot;)
end</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^mtoggle$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Show Exits</name>
                    <script>display(getRoomExits(lastId))
echo(&quot;special exits:\n&quot;)
display(getSpecialExits(lastId))</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^showexits$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Set Room Size</name>
                    <script>setRoomSize(matches[2])
onPlayerMove(matches[2])</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^setroomsize (\d+)$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Mouse Set Location</name>
                    <script>mouseLocation = 1
--makes it so instead of speedwalking you are set to the location you click on</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^setloc$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Delete Room</name>
                    <script>if roomsToDelete == nil then
	roomsToDelete = {}
end
local room
if matches[2] == &quot;clear&quot; then
	roomsToDelete = {}
	display(&quot;deletion list cleared&quot;)
end
if matches[2] then
	room = tonumber(matches[2])
else
	room = lastId
end
if roomsToDelete[room] then
	roomsToDelete[room] = false
	echo(room..&quot; removed from list&quot;)
else
	roomsToDelete[room] = true
	echo(room..&quot; added to list&quot;)
end</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^delroom\s?(.+)?$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Map Follow Toggle</name>
                    <script>if mapfollow then
	mapfollow = nil
	echo(&quot;\n MAPPER FOLLOWING DISABLED&quot;)
else
	mapfollow = 1
	mapstatus = nil
	echo(&quot;\n MAPPER FOLLOWING ENABLED&quot;)
end</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>mapfollow</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Map Special Exit</name>
                    <script>specialexitcommand = matches[2]
specialdirection = matches[3]
mapspecial = 1
send(specialexitcommand)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>&gt;([^&gt;]+)&gt;(\w+)</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Find Me</name>
                    <script>send(&quot;brief map&quot;)
send(&quot;look&quot;)
findme=1
if matches[2] == &quot;stop&quot; then
	findme=nil
end</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>findme\s?(\w+)?</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Stop Special Exits</name>
                    <script>mapspecial = nil</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>stopspecial</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>No HM Portals</name>
                    <script>--set the portals to your map to enable this
local forbidden = {[137]=99, [5860]=99, [588]=99, [1081]=99, [1361]=99, [33798]=99}
for i,v in pairs(forbidden) do
	setRoomWeight(i,v)
end</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>portalsoff</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Set Room Cost</name>
                    <script>setRoomWeight(lastId, tonumber(matches[2]))</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>setrcost (\d+)</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Show Room Script</name>
                    <script>display(getRoomScript(lastId))</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>showscript</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Delete Selected Rooms</name>
                    <script>for i,v in pairs(roomsToDelete) do
	if v then
		doRoomDelete(i)
	end
end
roomsToDelete = {}</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>doDelete</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Color Room</name>
                    <script>display(colorMappings[matches[2]])
setRoomEnv(lastId, colorMappings[matches[2]])
centerview(lastId)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>croom (\w+)</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>show color</name>
                    <script>display(getCustomEnvColorTable())</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>scolor</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Show room weight</name>
                    <script>display(getRoomWeight(lastId))</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>sweight</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Block room</name>
                    <script>setRoomWeight(lastId, 99)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>broom</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Move Player on Map</name>
                    <script>onFollow(matches[2])</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>mmove (.+)</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Move room to new area</name>
                    <script>Name = matches[2]
--find the highest current area id
local areas = getAreaTable()
local zoneId = 0
for i,v in pairs(areas) do
	if v &gt; zoneId then
		zoneId = v
	end
end
zoneId = zoneId+1
setAreaName(zoneId, Name)
setRoomArea( lastId, zoneId )
UserArea=zoneId
centerview(lastId)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^movenewarea (.*)$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>move room to existing area</name>
                    <script>Name = matches[2]
local areas = getAreaTable()
for i,v in pairs(areas) do
	if i == Name then
		zoneId = v
	end
end
setRoomArea( lastId, zoneId )
UserArea=zoneId
centerview(lastId)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^moveinarea\s(.*)$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>First time run</name>
                    <script>tkm:makeSqlDB()</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^firstRun$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Setup Mapper Ansi</name>
                    <script>sendSocket(&quot;aset room_short higreen\n&quot;)
sendSocket(&quot;aset room_short_suff reset+¡\n&quot;)
sendSocket(&quot;aset room_long brown\n&quot;)
sendSocket(&quot;aset room_exits yellow\n&quot;)
sendSocket(&quot;aset room_exits_suff reset+§\n&quot;)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^mapSetup$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Delete room from an entire area</name>
                    <script>for i,v in pairs(getAreaTable()) do
	if i==matches[2] then
		for j,k in pairs(getAreaRooms(v)) do
			deleteRoom(k)
		end
	end
end</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^clearArea\s(.*)$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Make a brand new area</name>
                    <script>Name = matches[2]
--find the highest current area id
local areas = getAreaTable()
local zoneId = 0
for i,v in pairs(areas) do
	if v &gt; zoneId then
		zoneId = v
	end
end
zoneId = zoneId+1
setAreaName(zoneId, Name)
UserArea=zoneId
lastId=nil
display(&quot;To create a new room, type 'firstroom' and move&quot;)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^newarea\s(.*)$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Add Favorite</name>
                    <script>--Adds a favorite in your current room.
--If you enter a string like: addFav Shops:Cancer's Shop it will add a new favorite
--under the Shops label
--'Bar Car of the Musicland Express|||151|||25966|||36
local favs = searchRoomUserData(&quot;favorite&quot;, &quot;&quot;)
local numFavs=0
local match = matches[2]
if (string.find(match,&quot;:&quot;)) then
	display(string.find(match,&quot;:&quot;))
end
for i,v in pairs(favs) do
	numFavs=numFavs+1
end
--addRoomUserData(lastId, &quot;favorites&quot;, entry..&quot;|||&quot;..numFavs..&quot;|||&quot;..lastId..&quot;|||&quot;..parentId))</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^addFav\s(.*)$</regex>
                </Alias>
            </AliasGroup>
        </AliasGroup>
    </AliasPackage>
    <ActionPackage/>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>3k Mapper</name>
            <packageName>3k Mapper</packageName>
            <script></script>
            <eventHandlerList/>
            <ScriptGroup isActive="yes" isFolder="yes">
                <name>3k Mapper</name>
                <packageName></packageName>
                <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
mudlet = mudlet or {}; mudlet.mapper_script = true
if not tkm then
	tkm = {}
end</script>
                <eventHandlerList/>
                <Script isActive="yes" isFolder="no">
                    <name>onEventHandler</name>
                    <packageName></packageName>
                    <script>function onEventHandler( event, args )
	local comcheck
	if comTable == nil then
		comTable = {}
	end
	if mapspecial == nil then
		if args then comcheck = checkCommand(args) else return end
		if comcheck then
			table.insert(comTable, comcheck)
		end
	end
end

function checkCommand(arg)
	if arg == &quot;e&quot; then
		arg = &quot;east&quot;
	elseif arg == &quot;w&quot; then
		arg = &quot;west&quot;
	elseif arg == &quot;s&quot; then
		arg = &quot;south&quot;
	elseif arg == &quot;n&quot; then
		arg = &quot;north&quot;
	elseif arg == &quot;ne&quot; then
		arg = &quot;northeast&quot;
	elseif arg == &quot;nw&quot; then
		arg = &quot;northwest&quot;
	elseif arg == &quot;se&quot; then
		arg = &quot;southeast&quot;
	elseif arg == &quot;sw&quot; then
		arg = &quot;southwest&quot;
	elseif arg == &quot;u&quot; then
		arg = &quot;up&quot;
	elseif arg == &quot;d&quot; then
		arg = &quot;down&quot;
	end
	if checkExit(lastId,arg) then
		return arg
	end
	if fulldirtable[arg] or dirtable[arg] then
		return arg
	end
	return nil
end
</script>
                    <eventHandlerList>
                        <string>sysDataSendRequest</string>
                    </eventHandlerList>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Helper Functions</name>
                    <packageName></packageName>
                    <script>function mapon()
	return mapstatus
end

function splitExits(roomexits)
	roomexits = string.split(roomexits, ',')
    local newexits = {}
    for i,v in pairs(roomexits) do
        newexits[i] = string.trim(v)
    end
	return newexits
end

function matchKeys(t1, t2)
	--if the keys are the same, return true
	for i,v in pairs(t1) do
		if not t2[i] then
			return nil
		end
	end
	return true
end

function add_arrays(array1, array2)
	local output = {}
	for i,v in ipairs(array1) do
		output[i] = v+array2[i]
	end
	return output
end

function convertRoomName(name)
	local strpos = string.find(name, tkm.specialChar)
	local trimname = name
	if strpos then 
		trimname = string.sub(trimname,0,strpos-1)
	end
	trimname = string.gsub(trimname, &quot;^%s*(.-)%s*$&quot;, &quot;%1&quot;)
	return trimname
end

function removeRoomExits(name)
	local roomname = convertRoomName(name)
	roomname = string.gsub(roomname, &quot;%([%a+,?]+%)&quot;, &quot;&quot;)
	roomname = string.gsub(roomname, &quot;^%s*(.-)%s*$&quot;, &quot;%1&quot;)
	return roomname
end

function removeDescBreaks(desc)
	local nobreaks = string.gsub(desc, &quot;.\n&quot;, &quot;&quot;) --specialized for our maps
	return nobreaks
end

function removeBreaks(desc)
	--remove line breaks
	local nobreaks = string.gsub(desc, &quot;\n&quot;, &quot;&quot;)
	return nobreaks
end

function swapKeysValues(table)
	local output = {}
	for i,v in pairs(table) do
		test = string.sub(v, 1,1)
		if (tonumber(test) and tonumber(test) &gt;= 0) then
			v = string.sub(v, 2)
		end
		output[v] = i
	end
	return output
end

function concatTables(table1, table2)
	local output = {}
	for i,v in pairs(table1) do
		output[i] = v
	end
	for i,v in pairs(table2) do
		output[i] = v
	end
	return output
end

function getAllExits(roomId)
   local exits = getRoomExits(roomId)
	local sexits = {}
   for i,v in pairs(getSpecialExits(roomId)) do
		for j,k in pairs(v) do
			sexits[j]=i
		end
	end
   return concatTables(exits,sexits)
end</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>speedwalker</name>
                    <packageName></packageName>
                    <script>function doSpeedWalk()
  if #speedWalkPath == 0 then
    echo(&quot;Couldn't find a path to the destination :(&quot;)
  end
  for i = 1, #speedWalkPath do
    speedWalkPath[i] = tonumber(speedWalkPath[i])
  end
  if mouseLocation then
	display(&quot;mouse location&quot;)
	mouseLocation = nil
	lastId = speedWalkPath[table.getn(speedWalkPath)]
	onPlayerMove(lastId)
	return
  end
  exits = getAllExits(lastId)
  local qtindex = 0
  local qtpath = &quot;&quot;
  speedWalking = 1
  roomsToWalk = speedWalkPath
  for i,v in pairs(speedWalkPath) do
	for j,k in pairs(exits) do
		if v==k then
			if necro then
				if qtindex == 0 then
					qtpath = j..&quot;/&quot;
				else
					qtpath = qtpath..j..&quot;/&quot;
				end
				qtindex = qtindex+1
				local script = getRoomUserData(v, &quot;script&quot;)
				if script ~= '' then
					qtpath = qtpath..script..&quot;/&quot;
					qtindex = qtindex+1
				end
				if qtindex &gt; 40 then
					send(&quot;qtrance &quot;..qtpath)
					qtpath = &quot;&quot;
					qtindex = 0
				end
			else
				send(j)
--				display(j)
--				display(qtpath)
				execRoomScript(v)
			end
			lastId = v
			break
		end
	end
    exits = getAllExits(lastId)
  end
  if necro then
    send(&quot;qtrance &quot;..qtpath)
  end
  speedwalking = nil
end

function execRoomScript(roomId)
	local script = getRoomUserData(roomId, &quot;script&quot;)
	if script ~= '' then
		display(script)
		send(script)
	end
end</script>
                    <eventHandlerList>
                        <string>gmcp.Room</string>
                        <string>RoomNum</string>
                    </eventHandlerList>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Mapper Variables</name>
                    <packageName></packageName>
                    <script>function Set(s)
	local set = {}
	for _,i in pairs(s) do
		set[i] = true
	end
	return set
end

mudlet = mudlet or {}; mudlet.mapper_script = true
if not tkm then
	tkm = {}
end
comTable = {}
dirtable = Set {&quot;nw&quot;,&quot;n&quot;,&quot;ne&quot;,&quot;w&quot;,&quot;e&quot;,&quot;sw&quot;,&quot;s&quot;,&quot;se&quot;,&quot;u&quot;,&quot;d&quot;}
fulldirtable = Set {&quot;northwest&quot;, &quot;north&quot;, &quot;northeast&quot;, &quot;west&quot;, &quot;east&quot;, &quot;southwest&quot;,
	&quot;south&quot;, &quot;southeast&quot;, &quot;up&quot;, &quot;down&quot;}
dirtypes = {north=1, northeast=2, northwest=3, east=4, west=5,
	south=6, southeast=7, southwest=8, up=9, down=10, [&quot;in&quot;]=11, out=12}

dirnums = {[1]=&quot;north&quot;, [2]=&quot;northeast&quot;, [3]=&quot;northwest&quot;,[4]=&quot;east&quot;,
	[5]=&quot;west&quot;,[6]=&quot;south&quot;,[7]=&quot;southeast&quot;,[8]=&quot;southwest&quot;,[9]=&quot;up&quot;,[10]=&quot;down&quot;}
tkm.specialChar = &quot;¡&quot;
mapScale = 8
priorMapScale = 8
function calculateMapOffset()
	diroffset = {[1]={0,1*mapScale,0}, [2]={1*mapScale,1*mapScale,0}, 
		[3]={-1*mapScale,1*mapScale,0}, [4]={1*mapScale,0,0},
		[5]={-1*mapScale,0,0}, [6]={0,-1*mapScale,0}, 
		[7]={1*mapScale,-1*mapScale,0}, [8]={-1*mapScale,-1*mapScale,0},
		[9]={0,0,1}, [10]={0,0,-1}}
end
calculateMapOffset()

reversedir = {[1]=6, [2]=8, [3]=7,[4]=5,[5]=4,[6]=1,[7]=3,[8]=2,[9]=10,[10]=9}
speedwalking = nil
mapspecial = nil
mapfollow = 1
local vars = getMapVar()
if vars['RoomId'] then
	lastId = vars['RoomId']
	UserArea=getRoomArea(lastId)
	centerview(lastId)
end</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Color Mappings</name>
                    <packageName></packageName>
                    <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
--[[
colorMappings = {red={0, 255, 0, 0}, green={1, 0, 255, 0}, blue={2, 0, 0, 255},
 yellow={3, 255, 255, 0}, cyan={4, 0, 255, 255}, magenta={5, 255, 0, 255}, default={6, 255, 0,0}}
for i,v in pairs(colorMappings) do
	setCustomEnvColor(v[1], v[2], v[3], v[4])
end
]]
colorMappings = {red=257, green=258, yellow=259, blue=260, magenta=261,
	cyan=262, white=263, black=264, lred=265, lgreen=266, lyellow=267,
	lblue=268, lmagenta=269, lcyan=270, lwhite=271, lblack=272}
--[[
customEnvColors[257] = mpHost-&gt;mRed_2;
    customEnvColors[258] = mpHost-&gt;mGreen_2;
    customEnvColors[259] = mpHost-&gt;mYellow_2;
    customEnvColors[260] = mpHost-&gt;mBlue_2;
    customEnvColors[261] = mpHost-&gt;mMagenta_2;
    customEnvColors[262] = mpHost-&gt;mCyan_2;
    customEnvColors[263] = mpHost-&gt;mWhite_2;
    customEnvColors[264] = mpHost-&gt;mBlack_2;
    customEnvColors[265] = mpHost-&gt;mLightRed_2;
    customEnvColors[266] = mpHost-&gt;mLightGreen_2;
    customEnvColors[267] = mpHost-&gt;mLightYellow_2;
    customEnvColors[268] = mpHost-&gt;mLightBlue_2;
    customEnvColors[269] = mpHost-&gt;mLightMagenta_2;
    customEnvColors[270] = mpHost-&gt;mLightCyan_2;
    customEnvColors[271] = mpHost-&gt;mLightWhite_2;
    customEnvColors[272] = mpHost-&gt;mLightBlack_2;
]]</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Map Modifications</name>
                    <packageName></packageName>
                    <script>function doRoomDelete(roomId)
	display(roomId)
	--disconnect exits
	local specialExits = getSpecialExits(roomId)
	local tablesize = 0
	if specialExits then
		for i,v in pairs(specialExits) do
			tablesize = tablesize + 1
		end
	end
	if tablesize &gt; 0 then
		for i,v in specialExits do
			for j,k in pairs(v) do
				addSpecialExit(i,-1,j)
			end
		end
	end
	deleteRoom(roomId)
end


-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
--[[
colorMappings = {red={0, 255, 0, 0}, green={1, 0, 255, 0}, blue={2, 0, 0, 255},
 yellow={3, 255, 255, 0}, cyan={4, 0, 255, 255}, magenta={5, 255, 0, 255}, default={6, 255, 0,0}}
for i,v in pairs(colorMappings) do
	setCustomEnvColor(v[1], v[2], v[3], v[4])
end
]]
colorMappings = {red=257, green=258, yellow=259, blue=260, magenta=261,
	cyan=262, white=263, black=264, lred=265, lgreen=266, lyellow=267,
	lblue=268, lmagenta=269, lcyan=270, lwhite=271, lblack=272}
--[[
customEnvColors[257] = mpHost-&gt;mRed_2;
    customEnvColors[258] = mpHost-&gt;mGreen_2;
    customEnvColors[259] = mpHost-&gt;mYellow_2;
    customEnvColors[260] = mpHost-&gt;mBlue_2;
    customEnvColors[261] = mpHost-&gt;mMagenta_2;
    customEnvColors[262] = mpHost-&gt;mCyan_2;
    customEnvColors[263] = mpHost-&gt;mWhite_2;
    customEnvColors[264] = mpHost-&gt;mBlack_2;
    customEnvColors[265] = mpHost-&gt;mLightRed_2;
    customEnvColors[266] = mpHost-&gt;mLightGreen_2;
    customEnvColors[267] = mpHost-&gt;mLightYellow_2;
    customEnvColors[268] = mpHost-&gt;mLightBlue_2;
    customEnvColors[269] = mpHost-&gt;mLightMagenta_2;
    customEnvColors[270] = mpHost-&gt;mLightCyan_2;
    customEnvColors[271] = mpHost-&gt;mLightWhite_2;
    customEnvColors[272] = mpHost-&gt;mLightBlack_2;
]]

-------------------------------------------------
-- room label the room I'm in
-- room label 342 this is a label in room 342
-- room label green this is a green label where I'm at
-- room label green black this is a green to black label where I'm at
-- room label 34 green black this is a green to black label at room 34
-- how it works: split input string into tokens by space, then determine
-- what to do by checking first few tokens, and finally call the local
-- function with the proper arguments
function tkm.roomLabel(input)
  local tk = input:split(&quot; &quot;)
  local room, fg, bg, message = lastId, &quot;yellow&quot;, &quot;red&quot;, &quot;Some room label&quot;

  -- input always have to be something, so tk[1] at least always exists
  if tonumber(tk[1]) then
    room = tonumber(table.remove(tk, 1)) -- remove the number, so we're left with the colors or msg
  end

  -- next: is this a foreground color?
  if tk[1] and color_table[tk[1]] then
    fg = table.remove(tk, 1)
  end

  -- next: is this a backround color?
  if tk[1] and color_table[tk[1]] then
    bg = table.remove(tk, 1)
  end

  -- the rest would be our message
  if tk[1] then
    message = table.concat(tk, &quot; &quot;)
  end

  -- if we haven't provided a room ID and we don't know where we are yet, we can't make a label
  if not room then
    echo(&quot;We don't know where we are to make a label here.&quot;) return
  end

  local x,y = getRoomCoordinates(room)
  local f1,f2,f3 = unpack(color_table[fg])
  local b1,b2,b3 = unpack(color_table[bg])

  -- finally: do it :)

  local lid = createMapLabel(getRoomArea(room), message, x, y, f1,f2,f3, b1,b2,b3)
  echo(string.format(&quot;Created new label #%d '%s' in %s.&quot;, lid, message, getRoomAreaName(getRoomArea(room))))
end
</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Player Movements</name>
                    <packageName></packageName>
                    <script>function onPlayerMove(roomid)
	if roomid then
		roomid = tonumber(roomid)
		if (getMapVar()[&quot;RoomId&quot;]) then
			local mapw=tonumber(getMapVar(&quot;mWidth&quot;))/2
			local maph=tonumber(getMapVar(&quot;mHeight&quot;))/2
			local x,y,z
			setMapVar(&quot;RoomId&quot;,roomid)
			x=getMapVar(&quot;XView&quot;)
			y=getMapVar(&quot;YView&quot;)*-1
			z=getMapVar(&quot;ZView&quot;)
			lastId = roomid
			lastx,lasty,lastz = getRoomCoordinates(lastId)
			local cArea = getRoomArea(roomid)
			if lastz ~= z or cArea ~= UserArea or y&gt;(lasty+maph) or y&lt;(lasty-maph) or x&gt;(lastx+mapw) or x&lt;(lastx-mapw) then
				centerview(roomid)
			else
				updateMap()
			end
		else
			centerview(roomid)
		end
		UserArea = getRoomArea(roomid)
--		updateRoomInfo()
	end
end

function onFollow(direction)
	--direction populated when we are following, otherwise we're looking
	--a1t the player's input via comTable
	if direction then
		checkLastCommand(direction)
		onPlayerMove(lastId)
		table.remove(comTable,1)
	else
		if roomsToWalk then
			if (#roomsToWalk == 0) then
				roomsToWalk = nil
				speedWalking = 0
				onFollow(nil)
			else
				onPlayerMove(roomsToWalk[1])
				table.remove(roomsToWalk,1)
			end
		else
			local lastcommand = comTable[1]
			if lastcommand == nil then
				return
			end
			checkedcommand = checkLastCommand(lastcommand)
		end
	end
	onPlayerMove(lastId)
	table.remove(comTable,1)
end

function roomWalk(roomid)
	local result = gotoRoom(roomid)
	if result then
		lastId = roomid
		centerview(lastId)
	end
end
</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Player Locator</name>
                    <packageName></packageName>
                    <script>function findWimpy(name,desc,exits)
	--get the rooms from where I wimpied
	local lExits = getAllExits(lastId)
	--get all the exits I now see
	local exits = swapKeysValues(splitExits(exits))
	local candidates={}
	for dir, id in pairs(lExits) do
		if matchKeys(getAllExits(id),exits) then
			table.insert(candidates,id)
		end
	end
	if #candidates == 1 then
		onPlayerMove(candidates[1])
	elseif #candidates &gt; 1 then
		local cand2 = {}
		for i,id in pairs(candidates) do
			if (getRoomName(id) == name) then
				table.insert(cand2,id)
			end
		end
		if #cand2 == 1 then
			onPlayerMove(cand2[1])
		else
			doFind(cand2, desc)
		end
	else
		echo(&quot;cannot find ourselves\n&quot;)
	end
end

function onFindMe(name, desc, exits)
	beforeconvert = searchRoom(name)
	withexits = searchRoom(convertRoomName(name))
	withoutexits = searchRoom(removeRoomExits(name))
	local pExits = {}
	if table.getn(withoutexits)&gt;0 then
		doFind(withoutexits, desc)
	elseif table.getn(withexits)&gt;0 then
		doFind(withexits, desc)
	elseif table.getn(beforeconvert)&gt;0 then
		doFind(beforeconvert,desc)
	else
		doDescFind(desc)
	end
end

function getKeys(table)
	--returns the keys of our table (in this case the value from seachRoom)
	output = {}
	local iter = 1
	for i,v in pairs(table) do
		output[iter] = v
		iter = iter + 1
	end
	return output
end

function doDescFind(desc)
	desc = string.sub(desc,0,string.len(desc)-1)
	desc = string.split(desc, &quot;\n&quot;)
	local pExits = searchRoomUserData(&quot;description&quot;, desc[1])
	local count = 0
	local roomId
	if (pExits) then
		for i,v in pairs(pExits) do
			count = count+1
			roomId = i
			if count &gt; 1 then
				break
			end
		end
		if (count == 1) then
			display('Found')
			onPlayerMove(roomId)
		else
	--		display(pExits)
		end
	end
end

function doFind(results, desc)
	local pExits = {}
	if table.getn(results) == 1 then
		onPlayerMove(tonumber(results[1]))
		comTable = {}
	else
		--multiple entries, do room descs
		for i,v in pairs(results) do
			local roomdesc = getRoomUserData(v, &quot;description&quot;)
			roomdesc = string.gsub(roomdesc,&quot;.\n&quot;,&quot;&quot;)
			if desc == roomdesc then
				pExits[v] = roomdesc
			end
		end
		if table.getn(pExits) == 1 then
			onPlayerMove(pExits[1])
			comTable = {}
		else
			--try matching room exits now
			display(&quot;trying exits&quot;)
			local lExits = swapKeysValues(splitExits(exits))
			local pExits2 = {}
			for i,v in pairs(pExits) do
				if matchKeys(getAllExits(v),lExits) then
					table.insert(pExits2,v)
				end
			end
			if #pExits==1 then
				onPlayersMove(pExits2[1])
				display(&quot;FOUND!&quot;)
			else
				echo(&quot;Possible Rooms:\n&quot;)
--				display(pExits)
			end
		end
	end
end
</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Room Adding</name>
                    <packageName></packageName>
                    <script>function makeNewRoom( roomname, roomdesc, roomexits, checkedcommand)
	--makes a new room obviously
	local roomID  = createRoomID()
	display(&quot;making new room&quot;..roomname)
	addRoom( roomID )
	setRoomName( roomID, convertRoomName(roomname ))
	setRoomUserData(roomID, &quot;description&quot;, roomdesc)
	xyzd = getCoordsOfDir(roomID, checkedcommand)
	lastx,lasty,lastz,dirtype = xyzd[1],xyzd[2],xyzd[3],xyzd[4]
	setRoomCoordinates(roomID, lastx,lasty,lastz)
	if firstRoom == false then
		if mapspecial then
			addSpecialExit(lastId,roomID,specialexitcommand)
			mapspecial = nil
		else 
			setExit(lastId, roomID, dirtype)
			setExit(roomID, lastId, reversedir[dirtype])
		end
	end
	if UserArea == nil then UserArea = 101 end
	setRoomArea( roomID, UserArea )
	--restore the initial scaling if we changed it
	if mapScale ~= priorMapScale then
		mapScale = priorMapScale
		calculateMapOffset()
	end
	if roomexits then
	 newexits = splitExits(roomexits)
    --make exit stubs
    local existingExits = getRoomExits(roomID)
    for i,v in pairs(newexits) do
        if #existingExits == 0 and dirtypes[v] then
            setExitStub(roomID, dirtypes[v],1)
        else
            if not existingExits[v] and dirtypes[v] then
                setExitStub(roomID, dirtypes[v],1)
            end
        end
    end
    --connect any exit stubs we can
	local stubs = getExitStubs(roomID)
	if stubs then
	    for i,v in pairs(stubs) do
   	     connectExitStub(roomID, v)
	    end
	end
	end
	return roomID
end

function checkLastCommand(lastcommand)
	--checks if the command sent is in the exits of the current room
	--returns nil if it exists, otherwise returns the exit we should map
	--IE IF THIS FUNCTION RETURNS TRUE, THERE IS NO EXIT!
	if firstRoom == true then
		return 1
	end
--	display(lastcommand)
	local exit = checkExit(lastId, lastcommand)
--	display(exit)
	if exit then
		lastId = exit
		lastx,lasty,lastz = getRoomCoordinates(exit)
		return nil
	end
	--return the direction we should map if it doesn't exist in the current room
--	display(&quot;no exit found in checklastcommand&quot;)
	return lastcommand
end
</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Room Checking Functions</name>
                    <packageName></packageName>
                    <script>function onCheckRoom(roomname, roomdesc, roomexits)
	--Called whenever a room is entered
	if mapon() == nil and mapfollow == nil then
		table.remove(comTable,1)
		return
	end
	if mapspecial then
		checkedcommand = specialdirection
	else
		local lastcommand = comTable[1]
	--	display(lastcommand)
		if lastcommand == nil then
			return
		end
		checkedcommand = checkLastCommand(lastcommand)
	end
	if checkedcommand and mapfollow == nil then
       if firstRoom == false then
			lastx,lasty,lastz = getRoomCoordinates(lastId)
			collisions = checkCoords(lastId, checkedcommand, roomname, roomdesc)
			if collisions then
				--there was an overlapping room AND an exit existed to it.
				--or room was the same as we made the exit within checkCoords function
				lastId = collisions
			else
				--no overlapping room, make a new one in the given direction
				lastId = makeNewRoom(roomname, roomdesc, roomexits, checkedcommand)
			end
		else
			lastId = makeNewRoom(roomname, roomdesc, roomexits, checkedcommand)
			firstRoom = false
		end
	end	
	onPlayerMove(lastId)
	table.remove(comTable,1)
end

function checkCoords(RoomId, dir, roomname, roomdesc)
	--check if a room exists already in the proposed direction
	--and if so and rooms match, will create an exit for that room
	dirtype=dirtypes[dir]
	if dirtype == nil then
		return 0
	end
	dirlocation = diroffset[dirtype]
	if dirlocation == nil then
		calculateMapOffset()
		dirlocation = diroffset[dirtype]
	end
	local location = {lastx,lasty,lastz}
	local newloc = add_arrays(location, dirlocation)
	local conflicts = getRoomsByPosition(UserArea, newloc[1], newloc[2], newloc[3])
	local firstconflict = conflicts[0]	
	if firstconflict then
		--a room existed where we want to go, does an exit exist to it?
		local conflictingroom = checkExit(lastId, dir)
		echo(&quot;\nconflict exists&quot;)
		if conflictingroom then
			echo(&quot; with exit\n&quot;)
			--a room exists and an exit also exists in the given direction
			--check if the descriptions and name match, if so it's the same room to us
			if checkRoomInfo(firstconflict, roomdesc, roomname) then
				return firstconflict
			else
				--it isn't the same room, but it still conflicts, change scale to 1/2 and add it
				priorMapScale = mapScale
				mapScale = mapScale/2
				calculateMapOffset()
				return nil
			end
		else
			echo(&quot; without exit\n&quot;)
			--no direction to this room, but a room exists in that direction, is it an unconnected room?
			local roominfo = checkRoomInfo(firstconflict, roomdesc, roomname)
			if roominfo then
				--the room is the same, make the exit
				if mapspecial then
					addSpecialExit(RoomId, firstconflict, specialexitcommand)	
					mapspecial = nil
				else
					setExit(RoomId, firstconflict, dirtype)
					setExit(firstconflict, RoomId, reversedir[dirtype])
				end
			else
				--there is no direction to the next room, but there is a conflict, half
				--the scale and put room there
				priorMapScale = mapScale
				mapScale = mapScale/2
				calculateMapOffset()
				return nil
			end
		end
	end	
	return firstconflict
end

function checkRoomInfo(roomId, roomdesc, roomname)
	--checks the the supplied roomdesc and name are the same as roomId
	local name = getRoomName(roomId)
	local desc = getRoomUserData(roomId, &quot;description&quot;)
	if ((roomname == name) or (removeRoomExits(roomname) == removeRoomExits(name)))
	 and ((roomdesc == desc) or (removeBreaks(roomdesc) == removeDescBreaks(desc))) then
		return roomId
	else
		return nil
	end
end

function getCoordsOfDir(roomID, dir)
	--takes a room id and a direction and returns
	--the coords of the room in a given direction from
	--the supplied room
	if firstRoom == true then
		return {0,0,0,nil}
	end
	dirtype=dirtypes[dir]
	if dirtype == nil then
		return 0
	end
	dirlocation = diroffset[dirtype]
	if lastx == nil then
		lastx,lasty,lastz = 0,0,0
	end
	local location = {lastx,lasty,lastz}
	local newloc = add_arrays(location, dirlocation)
	return {newloc[1],newloc[2],newloc[3],dirtype}
end

function checkExit(roomId, dir)
	--input is a room id and a direction(word dir, not numerical)
	--outputs room num if it exists, nil otherwise
	if roomId == nil then
		return nil
	end
	local exits = getRoomExits(roomId)
	for i,v in pairs(exits or {}) do
		if i == dir then
			--set lastId to the room we are moving to and coords
			return v
		end
	end
	local exits = getSpecialExits(roomId)
	for i,v in pairs(exits or {}) do
		for j,k in pairs(v) do
			if j == dir then
				--set lastId to the room we are moving to and coords
				return i
			end
		end
	end
	return nil
end
</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Process Exits</name>
                    <packageName></packageName>
                    <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function processExits(exits)
	if findme == nil and pWimpy==nil then
		onCheckRoom(roomname, roomdesc, exits)
	elseif findme then
		onFindMe(roomname, roomdesc, exits)
		findme = nil
	elseif pWimpy then
		findWimpy(roomname, roomdesc, exits)
		pWimpy=nil
	end
end</script>
                    <eventHandlerList/>
                </Script>
            </ScriptGroup>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
</MudletPackage>
